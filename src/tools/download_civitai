#!/bin/bash

set -e

download_civitai() {
    local model_id="$1"
    local target_dir="${2:-.}"
    
    echo "üé® Checking CivitAI model ID: $model_id"
    echo "üìÅ Target directory: $target_dir"
    
    mkdir -p "$target_dir"
    
    echo "üîç Fetching model info from CivitAI API..."
    
    local curl_cmd="curl -s"
    if [ -n "$CIVITAI_TOKEN" ]; then
        curl_cmd="$curl_cmd -H 'Authorization: Bearer $CIVITAI_TOKEN'"
        echo "üîë Using CivitAI authentication token"
    fi
    
    local api_response=$(eval "$curl_cmd 'https://civitai.com/api/v1/model-versions/$model_id'")
    
    if [ $? -ne 0 ] || [ -z "$api_response" ]; then
        echo "‚ùå Failed to fetch model info from CivitAI API"
        return 1
    fi
    
    local error_message=$(echo "$api_response" | jq -r '.error // empty')
    if [ -n "$error_message" ]; then
        echo "‚ùå CivitAI API error: $error_message"
        return 1
    fi
    
    local download_url=$(echo "$api_response" | jq -r '.files[0].downloadUrl // empty')
    local filename=$(echo "$api_response" | jq -r '.files[0].name // empty')
    
    if [ -z "$download_url" ] || [ -z "$filename" ]; then
        echo "‚ùå Could not extract download URL or filename from API response"
        echo "üîç API Response: $api_response"
        return 1
    fi
    
    if [[ "$download_url" == *"civitai.com/api/download"* ]] && [ -z "$CIVITAI_TOKEN" ]; then
        echo "‚ö†Ô∏è  This model may require CivitAI authentication"
        echo "üí° Set CIVITAI_TOKEN environment variable to download restricted models"
    fi
    
    echo "üì• Downloading: $filename"
    echo "üîó URL: $download_url"
    
    echo "üîÑ Resolving download URL..."
    local curl_redirect_cmd="curl -s -I -L"
    if [ -n "$CIVITAI_TOKEN" ]; then
        curl_redirect_cmd="$curl_redirect_cmd -H 'Authorization: Bearer $CIVITAI_TOKEN'"
    fi
    curl_redirect_cmd="$curl_redirect_cmd '$download_url'"
    
    local final_url=$(eval "$curl_redirect_cmd" | grep -i '^location:' | tail -1 | sed 's/^location: *//i' | tr -d '\r')
    
    if [ -z "$final_url" ]; then
        echo "‚ö†Ô∏è  Could not resolve final download URL, using original URL"
        final_url="$download_url"
    else
        echo "‚úÖ Resolved final URL: ${final_url:0:100}..."
    fi
    
    aria2c -x 16 -s 16 -k 1M -d "$target_dir" -o "$filename" \
        --auto-file-renaming=false --continue=true \
        --console-log-level=warn \
        "$final_url"

    local download_exit_code=$?
    
    if [ $download_exit_code -eq 0 ]; then
        echo "‚úÖ CivitAI download completed: $filename"
        
        if [[ "$filename" == *.zip ]]; then
            echo "üì¶ Detected zip file, extracting contents..."
            
            local zip_file="$target_dir/$filename"
            if unzip -q "$zip_file" -d "$target_dir"; then
                echo "‚úÖ Successfully extracted: $filename"
                
                # Optionally remove the zip file after extraction
                # Uncomment the next line if you want to delete zip files after extraction
                # rm "$zip_file" && echo "üóëÔ∏è  Removed original zip file: $filename"
            else
                echo "‚ùå Failed to extract zip file: $filename"
                echo "‚ö†Ô∏è  Keeping original zip file"
            fi
        fi
    else
        echo "‚ùå CivitAI download failed for model ID: $model_id (exit code: $download_exit_code)"

        return 1
    fi
}

download_civitai "$@"
