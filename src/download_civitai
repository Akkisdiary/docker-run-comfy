#!/bin/bash

# CivitAI Download Script
# Downloads models from CivitAI using model version IDs

set +e  # Don't exit on errors

# Function to download from CivitAI using direct API
download_civitai() {
    local model_id="$1"
    local target_dir="${2:-.}"
    
    echo "üé® Checking CivitAI model ID: $model_id"
    echo "üìÅ Target directory: $target_dir"
    
    # Create target directory if it doesn't exist
    mkdir -p "$target_dir"
    
    # Get model info from CivitAI API
    echo "üîç Fetching model info from CivitAI API..."
    
    # Build curl command with optional token
    local curl_cmd="curl -s"
    if [ -n "$CIVITAI_TOKEN" ]; then
        curl_cmd="$curl_cmd -H 'Authorization: Bearer $CIVITAI_TOKEN'"
        echo "üîë Using CivitAI authentication token"
    fi
    
    local api_response=$(eval "$curl_cmd 'https://civitai.com/api/v1/model-versions/$model_id'")
    
    if [ $? -ne 0 ] || [ -z "$api_response" ]; then
        echo "‚ùå Failed to fetch model info from CivitAI API"
        return 1
    fi
    
    # Check if API response contains an error
    local error_message=$(echo "$api_response" | jq -r '.error // empty')
    if [ -n "$error_message" ]; then
        echo "‚ùå CivitAI API error: $error_message"
        return 1
    fi
    
    # Extract download URL and filename using jq for robust JSON parsing
    local download_url=$(echo "$api_response" | jq -r '.files[0].downloadUrl // empty')
    local filename=$(echo "$api_response" | jq -r '.files[0].name // empty')
    
    if [ -z "$download_url" ] || [ -z "$filename" ]; then
        echo "‚ùå Could not extract download URL or filename from API response"
        echo "üîç API Response: $api_response"
        return 1
    fi
    
    # Check if the model requires authentication
    if [[ "$download_url" == *"civitai.com/api/download"* ]] && [ -z "$CIVITAI_TOKEN" ]; then
        echo "‚ö†Ô∏è  This model may require CivitAI authentication"
        echo "üí° Set CIVITAI_TOKEN environment variable to download restricted models"
    fi
    
    local target_file="$target_dir/$filename"
    
    # Check if file already exists
    if [ -f "$target_file" ]; then
        echo "‚úÖ File already exists, skipping download: $filename"
        return 0
    fi
    echo "üì• Downloading: $filename"
    echo "üîó URL: $download_url"
    
    # Download with aria2 for better performance
    cd "$target_dir"
    
    # Get the actual download URL by following redirects with curl first
    echo "üîÑ Resolving download URL..."
    local curl_redirect_cmd="curl -s -I -L"
    if [ -n "$CIVITAI_TOKEN" ]; then
        curl_redirect_cmd="$curl_redirect_cmd -H 'Authorization: Bearer $CIVITAI_TOKEN'"
    fi
    curl_redirect_cmd="$curl_redirect_cmd '$download_url'"
    
    local final_url=$(eval "$curl_redirect_cmd" | grep -i '^location:' | tail -1 | sed 's/^location: *//i' | tr -d '\r')
    
    if [ -z "$final_url" ]; then
        echo "‚ö†Ô∏è  Could not resolve final download URL, using original URL"
        final_url="$download_url"
    else
        echo "‚úÖ Resolved final URL: ${final_url:0:100}..."
    fi
    
    # Build aria2c command without auth headers for the final URL
    local aria2_cmd="aria2c -x 16 -s 16 -k 1M --download-result=hide --summary-interval=0 -console-log-level=error -o \"$filename\""
    aria2_cmd="$aria2_cmd --user-agent=\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36\""
    aria2_cmd="$aria2_cmd --header=\"Accept: */*\""
    aria2_cmd="$aria2_cmd --max-tries=3 --retry-wait=5"
    aria2_cmd="$aria2_cmd \"$final_url\""
    
    eval "$aria2_cmd"
    local download_exit_code=$?
    
    if [ $download_exit_code -eq 0 ]; then
        echo "‚úÖ CivitAI download completed: $filename"
        
        # Check if the downloaded file is a zip and extract it
        if [[ "$filename" == *.zip ]]; then
            echo "üì¶ Detected zip file, extracting contents..."
            
            # Extract zip file
            if unzip -q "$filename" -d "."; then
                echo "‚úÖ Successfully extracted: $filename"
                
                # rm "$filename" && echo "üóëÔ∏è  Removed original zip file: $filename"
            else
                echo "‚ùå Failed to extract zip file: $filename"
                echo "‚ö†Ô∏è  Keeping original zip file"
            fi
        fi
    else
        echo "‚ùå CivitAI download failed for model ID: $model_id (exit code: $download_exit_code)"
        
        # Provide specific error messages based on common issues
        case $download_exit_code in
            22)
                echo "üí° HTTP 400/403/404 error - Model may be private, deleted, or require authentication"
                echo "üîë Try setting CIVITAI_TOKEN if you have access to this model"
                ;;
            24)
                echo "üí° Authorization failed - Invalid or missing CivitAI token"
                echo "üîë Check your CIVITAI_TOKEN environment variable"
                ;;
            *)
                echo "üí° Network or server error - Check your internet connection"
                ;;
        esac
        
        return 1
    fi
}

# Call the function with all arguments
download_civitai "$@"
